import React, { useState, useCallback } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import FileUploadAdapter from '@/components/data-load/FileUploadAdapter';
import WizardStep from '@/components/data-load/WizardStep';
import { useAnnouncer } from '@/components/common/A11yAnnouncer';
import { readingService, importLogService } from '@/services/api';
import { useAuth } from '@/contexts/AuthContext'; // Updated import path
import * as csvUtils from '@/utils/csvUtils';
import { Reading, ImportLog } from '@/types';

const CsvImport: React.FC = () => {
  const [step, setStep] = useState(1);
  const [file, setFile] = useState<File | null>(null);
  const [readings, setReadings] = useState<Reading[]>([]);
  const [importResult, setImportResult] = useState<{ success: boolean, inserted?: number, errors?: number } | null>(null);
  const [processing, setProcessing] = useState(false);
  const { announce } = useAnnouncer();
  const { user } = useAuth();
  
  // Define wizard steps
  const steps = [
    { id: "upload", label: "Upload", isActive: step === 1, isComplete: step > 1 },
    { id: "preview", label: "Preview", isActive: step === 2, isComplete: step > 2 },
    { id: "import", label: "Import", isActive: step === 3, isComplete: step > 3 },
  ];

  const handleFileSelected = useCallback(async (data: any[], selectedFile: File) => {
    try {
      // Transform the data into readings
      const transformedReadings = data.map(row => ({
        id: undefined, // Make this optional for creation
        meter_id: row.meter_id,
        ts: row.timestamp || row.ts,
        value: parseFloat(row.value)
      })) as Reading[];
      
      setReadings(transformedReadings);
      setFile(selectedFile);
      setStep(2);
      announce(`File parsed successfully. ${transformedReadings.length} readings found.`);
    } catch (error) {
      console.error('Error processing file:', error);
      announce('Error processing file. Please check the format and try again.', true);
    }
  }, [announce]);
  
  const handleImport = async () => {
    try {
      setProcessing(true);
      
      // Import the readings
      const result = await readingService.bulkSaveReadings(readings);
      setImportResult(result);
      
      // Log the import
      if (user && file) {
        await importLogService.createImportLog({
          id: '', // This will be generated by the database
          ts: new Date().toISOString(),
          user_email: user.email || 'unknown@example.com',
          rows_ok: result.inserted || 0,
          rows_err: result.errors || 0,
          file_name: file.name
        });
      }
      
      // Move to the next step
      setStep(3);
      
      if (result.success) {
        announce(`Import completed successfully. ${result.inserted} readings imported.`);
      } else {
        announce(`Import completed with errors. ${result.errors} readings failed.`, true);
      }
    } catch (error) {
      console.error('Error importing readings:', error);
      announce('Error importing readings. Please try again.', true);
    } finally {
      setProcessing(false);
    }
  };
  
  const handleBack = () => {
    if (step > 1) {
      setStep(step - 1);
    }
  };
  
  return (
    <div className="container mx-auto py-10">
      <h1 className="text-3xl font-semibold mb-2">CSV Import</h1>
      <p className="text-gray-600 mb-6">Import meter readings from CSV files.</p>
      
      <WizardStep 
        currentStep={step}
        totalSteps={steps.length}
        stepTitle={steps[step - 1].label}
        steps={steps}
      />
      
      <Card className="p-6 mt-8">
        {step === 1 && (
          <div className="space-y-6">
            <h2 className="text-xl font-medium">Upload File</h2>
            <p className="text-gray-600">
              Select a CSV file containing meter readings. The file should have columns for meter_id, timestamp, and value.
            </p>
            <FileUploadAdapter
              onFileSelected={handleFileSelected}
              accept=".csv"
              maxSize={5 * 1024 * 1024} // 5MB
            />
          </div>
        )}
        
        {step === 2 && (
          <div className="space-y-6">
            <h2 className="text-xl font-medium">Preview Data</h2>
            <p className="text-gray-600">
              Review the data before importing. Make sure the meter IDs and values are correct.
            </p>
            
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Meter ID</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Timestamp</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Value</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {readings.slice(0, 10).map((reading, index) => (
                    <tr key={index}>
                      <td className="px-6 py-4 whitespace-nowrap">{reading.meter_id}</td>
                      <td className="px-6 py-4 whitespace-nowrap">{reading.ts}</td>
                      <td className="px-6 py-4 whitespace-nowrap">{reading.value}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
              
              {readings.length > 10 && (
                <p className="text-gray-500 text-sm mt-2 italic">
                  Showing 10 of {readings.length} rows.
                </p>
              )}
            </div>
            
            <div className="flex justify-between">
              <Button variant="outline" onClick={handleBack}>Back</Button>
              <Button onClick={handleImport} disabled={processing}>
                {processing ? 'Processing...' : 'Import Data'}
              </Button>
            </div>
          </div>
        )}
        
        {step === 3 && (
          <div className="space-y-6">
            <h2 className="text-xl font-medium">Import Complete</h2>
            
            {importResult?.success ? (
              <div className="bg-green-50 p-4 rounded-md">
                <h3 className="text-green-800 font-medium">Success!</h3>
                <p>Successfully imported {importResult.inserted} readings.</p>
              </div>
            ) : (
              <div className="bg-red-50 p-4 rounded-md">
                <h3 className="text-red-800 font-medium">Import Completed with Errors</h3>
                <p>Successfully imported {importResult?.inserted} readings.</p>
                <p>Failed to import {importResult?.errors} readings.</p>
              </div>
            )}
            
            <Button variant="outline" onClick={() => setStep(1)}>Import Another File</Button>
          </div>
        )}
      </Card>
    </div>
  );
};

export default CsvImport;
